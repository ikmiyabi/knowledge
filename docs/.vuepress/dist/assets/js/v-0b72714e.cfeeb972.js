"use strict";(self.webpackChunkvuepress_sample2=self.webpackChunkvuepress_sample2||[]).push([[3343],{4417:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-0b72714e",path:"/mobile/swift/swift%E5%85%A5%E9%96%80.html",title:"",lang:"ja",frontmatter:{},excerpt:"",headers:[{level:2,title:"変数の宣言",slug:"変数の宣言",children:[{level:3,title:"型推論による",slug:"型推論による",children:[]}]},{level:2,title:"定数の宣言",slug:"定数の宣言",children:[]},{level:2,title:"コメント",slug:"コメント",children:[]},{level:2,title:"データ型",slug:"データ型",children:[{level:3,title:"数値型",slug:"数値型",children:[]}]},{level:2,title:"タプル(Tuple)",slug:"タプル-tuple",children:[]},{level:2,title:"配列(Array)",slug:"配列-array",children:[]},{level:2,title:"辞書(Dictionary)",slug:"辞書-dictionary",children:[]},{level:2,title:"for文",slug:"for文",children:[]},{level:2,title:"ビット演算子",slug:"ビット演算子",children:[]},{level:2,title:"if文",slug:"if文",children:[]},{level:2,title:"switch文",slug:"switch文",children:[]},{level:2,title:"Optional",slug:"optional",children:[]}],filePathRelative:"mobile/swift/swift入門.md",git:{updatedTime:1639532968e3,contributors:[{name:"bamv-ikeda",email:"ikeda@bamv.co.jp",commits:1}]}}},1695:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h2 id="変数の宣言" tabindex="-1"><a class="header-anchor" href="#変数の宣言" aria-hidden="true">#</a> 変数の宣言</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">var</span> 変数名<span class="token punctuation">:</span> データ型 <span class="token operator">=</span> 初期値\n\n<span class="token comment">// 例</span>\n<span class="token keyword">var</span> number<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">10</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="型推論による" tabindex="-1"><a class="header-anchor" href="#型推論による" aria-hidden="true">#</a> 型推論による</h3><p>右辺からデータ型を推測できるような場合は、型の指定を省略できる。 言語仕様レベルでデータ型を推測してくれる仕組みのことを型推論と呼ぶ。</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span> <span class="token comment">// String型</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="定数の宣言" tabindex="-1"><a class="header-anchor" href="#定数の宣言" aria-hidden="true">#</a> 定数の宣言</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> 定数名<span class="token punctuation">:</span> データ型 <span class="token operator">=</span> 値\n\n<span class="token comment">// 例</span>\n<span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Ichiro&quot;</span></span>\n<span class="token comment">// 変数の宣言時と同様に型推論が働く</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Ichiro&quot;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="コメント" tabindex="-1"><a class="header-anchor" href="#コメント" aria-hidden="true">#</a> コメント</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">// 一行コメント</span>\n<span class="token comment">/*\n    複数行コメント\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="データ型" tabindex="-1"><a class="header-anchor" href="#データ型" aria-hidden="true">#</a> データ型</h2><table><thead><tr><th style="text-align:center;">データ型</th><th style="text-align:center;">保存できるデータ</th></tr></thead><tbody><tr><td style="text-align:center;">Int8</td><td style="text-align:center;">-128(2^7)〜127(2^7-1)の整数</td></tr><tr><td style="text-align:center;">Int16</td><td style="text-align:center;">-32768(2^15)〜32767(2^15-1)の整数</td></tr><tr><td style="text-align:center;">Int32</td><td style="text-align:center;">-2147483648(2^31)〜2147483647(2^31-1)の整数</td></tr><tr><td style="text-align:center;">Int64</td><td style="text-align:center;">-9223372036854775808(2^63)〜9223372036854775807(2^63-1)の整数</td></tr><tr><td style="text-align:center;">Int</td><td style="text-align:center;">32bitプラットフォームではInt32、64bitプラットフォームではInt64と同様</td></tr><tr><td style="text-align:center;">UInt8</td><td style="text-align:center;">0〜255(2^8-1)の整数</td></tr><tr><td style="text-align:center;">UInt16</td><td style="text-align:center;">0〜65535(2^16-1)の整数</td></tr><tr><td style="text-align:center;">UInt32</td><td style="text-align:center;">0〜4294967295(2^32-1)の整数</td></tr><tr><td style="text-align:center;">UInt64</td><td style="text-align:center;">0〜18446744073709551615(2^64-1)の整数</td></tr><tr><td style="text-align:center;">UInt</td><td style="text-align:center;">32bitプラットフォームではInt32、64bitプラットフォームではInt64と同様</td></tr><tr><td style="text-align:center;">Float</td><td style="text-align:center;">32bitの不動小数点</td></tr><tr><td style="text-align:center;">Double</td><td style="text-align:center;">64bitの不動小数点。小数を取り扱う場合は主にこちらを使用する</td></tr><tr><td style="text-align:center;">String</td><td style="text-align:center;">可変長文字列(複数の文字の連なり)</td></tr><tr><td style="text-align:center;">Characcter</td><td style="text-align:center;">任意の一文字</td></tr><tr><td style="text-align:center;">Bool</td><td style="text-align:center;">真偽値。trueまたはfalseのいずれか</td></tr></tbody></table><h3 id="数値型" tabindex="-1"><a class="header-anchor" href="#数値型" aria-hidden="true">#</a> 数値型</h3><ul><li>数値型には2進数、8進数、16進数で宣言することも可能</li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> bin <span class="token operator">=</span> <span class="token number">0b0111</span> <span class="token comment">// 2進数(binary number)</span>\n<span class="token keyword">let</span> bin <span class="token operator">=</span> <span class="token number">0o16</span> <span class="token comment">// 8進数(octal number)</span>\n<span class="token keyword">let</span> bin <span class="token operator">=</span> <span class="token number">0x1A</span> <span class="token comment">// 16進数(hexadecimal number)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>数値型のリテラルは_(アンダースコア)で区切ることができる。</li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> separatedNumber <span class="token operator">=</span> <span class="token number">123_456_789</span>\n<span class="token function">print</span> <span class="token punctuation">(</span>separatedNumber<span class="token punctuation">)</span> <span class="token comment">//=&gt;123456789</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="タプル-tuple" tabindex="-1"><a class="header-anchor" href="#タプル-tuple" aria-hidden="true">#</a> タプル(Tuple)</h2><ul><li>swiftでは複数の値をもつタプル型を宣言できる</li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> result<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Bool</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;iOS&quot;</span></span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span>\n<span class="token comment">// 省略形</span>\n<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;iOS&quot;</span></span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span>\n\n<span class="token comment">// データの使用</span>\n<span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//=&gt; True</span>\n<span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//=&gt; iOS</span>\n<span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//=&gt; 13</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>タプルの値は以下のように、同時に別の変数に代入できる</li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span><span class="token punctuation">(</span>isSuccess<span class="token punctuation">,</span> name<span class="token punctuation">,</span> version<span class="token punctuation">)</span> <span class="token operator">=</span> result\n<span class="token function">print</span><span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span> <span class="token comment">//=&gt; True</span>\n<span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">//=&gt; iOS</span>\n<span class="token function">print</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span> <span class="token comment">//=&gt; 13</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>タプルの値にラベルをつける</li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;iOS&quot;</span></span><span class="token punctuation">,</span> version<span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">)</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>isSuccess<span class="token punctuation">)</span> <span class="token comment">//=&gt; True</span>\n<span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//=&gt; iOS</span>\n<span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>version<span class="token punctuation">)</span> <span class="token comment">//=&gt; 13</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="配列-array" tabindex="-1"><a class="header-anchor" href="#配列-array" aria-hidden="true">#</a> 配列(Array)</h2><ul><li>配列の宣言</li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> oddNumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>\n<span class="token function">print</span><span class="token punctuation">(</span>oddNumbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">//=&gt; 3</span>\n\n<span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Apple&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Banana&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Orange&quot;</span></span><span class="token punctuation">]</span>\n<span class="token function">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token function">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">//=&gt; Apple</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>最初の要素、最後の要素を取得する <ul><li>取得結果はOptional型になることに注意</li></ul></li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Apple&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Banana&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Orange&quot;</span></span><span class="token punctuation">]</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span>first<span class="token punctuation">)</span>\n<span class="token function">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span>last<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>配列の値を書き換える</li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code>fruit<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Melon&quot;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>配列の要素の追加、挿入、削除</li></ul><table><thead><tr><th style="text-align:center;">操作</th><th style="text-align:center;">処理</th></tr></thead><tbody><tr><td style="text-align:center;">追加</td><td style="text-align:center;"><code>配列.append(追加する要素)</code></td></tr><tr><td style="text-align:center;">挿入</td><td style="text-align:center;"><code>配列.insert(追加する要素, at: インデックス)</code></td></tr><tr><td style="text-align:center;">削除</td><td style="text-align:center;">`配列.remove(at: 削除する要素のインデックス)</td></tr></tbody></table><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">var</span> userIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>\n\nuserIds<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>\nuserIds<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>\nuserIds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token function">print</span><span class="token punctuation">(</span>userIds<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="辞書-dictionary" tabindex="-1"><a class="header-anchor" href="#辞書-dictionary" aria-hidden="true">#</a> 辞書(Dictionary)</h2><ul><li>初期化</li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">var</span> fruitNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;apple&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;りんご&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;banana&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;ばなな&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;orange&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;みかん&quot;</span></span><span class="token punctuation">]</span>\n\n<span class="token comment">// 追加(キーが存在する場合は上書きとなる)</span>\nfruitNames<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;grape&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;ぶどう&quot;</span></span>\n<span class="token comment">// 削除</span>\nfruitNames<span class="token punctuation">.</span><span class="token function">removeValue</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;apple&quot;</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="for文" tabindex="-1"><a class="header-anchor" href="#for文" aria-hidden="true">#</a> for文</h2><ul><li>通常のfor文</li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">// 閉区間範囲演算子</span>\n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 半開区間範囲演算子</span>\n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..&lt;</span><span class="token number">5</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 2づつ増やすfor文</span>\n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">stride</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> by<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="ビット演算子" tabindex="-1"><a class="header-anchor" href="#ビット演算子" aria-hidden="true">#</a> ビット演算子</h2><table><thead><tr><th style="text-align:center;">演算子</th><th style="text-align:center;">内容</th><th style="text-align:center;">例</th></tr></thead><tbody><tr><td style="text-align:center;"><code>&lt;&lt;</code></td><td style="text-align:center;">値を左へn桁シフトする</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>&gt;&gt;</code></td><td style="text-align:center;">値を左へn桁シフトする</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>&amp;</code></td><td style="text-align:center;">AND演算(論理積)を行う</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">`</td><td style="text-align:center;">`</td><td style="text-align:center;">OR演算(論理和)を行う</td></tr><tr><td style="text-align:center;"><code>^</code></td><td style="text-align:center;">XOR演算(排他論理和)を行う</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>~</code></td><td style="text-align:center;">NOR演算(ビット否定)を行う</td><td style="text-align:center;"></td></tr></tbody></table><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> binaryNumber <span class="token operator">=</span> <span class="token number">0b1100</span>\n<span class="token function">print</span><span class="token punctuation">(</span>binaryNumber <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//=&gt; 3(0b0011)</span>\n<span class="token function">print</span><span class="token punctuation">(</span>binaryNumber <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//=&gt; 48(0b110000)</span>\n\n<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0b1100</span> <span class="token comment">// 12</span>\n<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">0b0110</span> <span class="token comment">// 6</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>x <span class="token operator">|</span> y<span class="token punctuation">,</span> radix<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//=&gt; 14(0b1110)</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> y<span class="token punctuation">,</span> radix<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//=&gt; 4(0b0100)</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>x <span class="token operator">^</span> y<span class="token punctuation">,</span> radix<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//=&gt; 10(0b1010)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="if文" tabindex="-1"><a class="header-anchor" href="#if文" aria-hidden="true">#</a> if文</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">if</span> 条件式 <span class="token punctuation">{</span>\n    <span class="token comment">// 条件式がtrueだった時の処理</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 条件式がfalseだった時の処理</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>FizzBuzz</li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">100</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">15</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;FizzBuzz&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Fizz&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Buzz&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="switch文" tabindex="-1"><a class="header-anchor" href="#switch文" aria-hidden="true">#</a> switch文</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">switch</span> 条件式 <span class="token punctuation">{</span>\n<span class="token keyword">case</span> 値 <span class="token number">1</span><span class="token punctuation">:</span>\n    <span class="token comment">// 式の値が1だった場合の処理</span>\n<span class="token keyword">case</span> 値 <span class="token number">2</span><span class="token punctuation">:</span>\n    <span class="token comment">// 式の値が2だった場合の処理</span>\n<span class="token keyword">default</span><span class="token punctuation">:</span>\n    <span class="token comment">// 式の値が1でも2でもなかった場合の処理</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>範囲演算子を使用する</li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">5</span>\n\n<span class="token keyword">switch</span> number <span class="token punctuation">{</span>\n<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">3</span><span class="token punctuation">:</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;1...3&quot;</span></span><span class="token punctuation">)</span>\n<span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">..&lt;</span><span class="token number">10</span><span class="token punctuation">:</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;4..&lt;10&quot;</span></span><span class="token punctuation">)</span>\n<span class="token keyword">default</span><span class="token punctuation">:</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;default&quot;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="optional" tabindex="-1"><a class="header-anchor" href="#optional" aria-hidden="true">#</a> Optional</h2><ul><li>swiftの通常データ型はそのままではnilを格納できない</li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">var</span> tel<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token nil constant">nil</span> <span class="token comment">//=&gt; コンパイルエラー</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>swiftにはデータ型の最後に?をつけることでnilを格納することができるOptional型を定義できる <ul><li>このOptional型は元のデータ型とは全く異なる型である</li></ul></li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">var</span> tel<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',55),e={},p=(0,a(3744).Z)(e,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);