"use strict";(self.webpackChunkvuepress_sample2=self.webpackChunkvuepress_sample2||[]).push([[9798],{1364:(t,e,a)=>{a.r(e),a.d(e,{data:()=>l});const l={key:"v-5897d01a",path:"/middleware/database/BigQuery%E3%81%8B%E3%82%89Athena%E3%81%B8.html",title:"BigQueryからAthenaへの移行メモ",lang:"ja",frontmatter:{},excerpt:"",headers:[{level:2,title:"Athenaとは？",slug:"athenaとは",children:[{level:3,title:"そもそもAthenaとは？",slug:"そもそもathenaとは",children:[]},{level:3,title:"Athenaの特徴",slug:"athenaの特徴",children:[]},{level:3,title:"Prestoとは？",slug:"prestoとは",children:[]}]},{level:2,title:"1. _PARTITIONTIMEをdtに変更",slug:"_1-partitiontimeをdtに変更",children:[]},{level:2,title:"2. FORMAT_DATEをDATE_FORMATに変更",slug:"_2-format-dateをdate-formatに変更",children:[]},{level:2,title:"3. 現在の日付",slug:"_3-現在の日付",children:[]},{level:2,title:"4. INTERVALの直後の数字には' 'をつける",slug:"_4-intervalの直後の数字には-をつける",children:[]},{level:2,title:"5. AthenaのINTERVALはWEEKが使用できない(?)ので注意",slug:"_5-athenaのintervalはweekが使用できない-ので注意",children:[]},{level:2,title:"6. 日時の差はAthenaは引き算で表示できる",slug:"_6-日時の差はathenaは引き算で表示できる",children:[]},{level:2,title:"7. Athenaでは'hoge'と\"hoge\"は区別される",slug:"_7-athenaでは-hoge-と-hoge-は区別される",children:[]},{level:2,title:"8. SUBSTR([文字列], [開始位置], [終了位置])",slug:"_8-substr-文字列-開始位置-終了位置",children:[]},{level:2,title:"9. DATE(log_time)のlog_timeはvarcharなのでcastに失敗するため、timestamp型にcastする※または日時型にトリミングする",slug:"_9-date-log-time-のlog-timeはvarcharなのでcastに失敗するため、timestamp型にcastする※または日時型にトリミングする",children:[]},{level:2,title:"10. prestoの場合、整数同士の割り算は整数が返却されるため、DOUBLE型にcastしてから割る",slug:"_10-prestoの場合、整数同士の割り算は整数が返却されるため、double型にcastしてから割る",children:[]},{level:2,title:"11. LIKE 演算子を最適化",slug:"_11-like-演算子を最適化",children:[]},{level:2,title:"12. int64はBIGINTへ変更",slug:"_12-int64はbigintへ変更",children:[]}],filePathRelative:"middleware/database/BigQueryからAthenaへ.md",git:{updatedTime:1639532968e3,contributors:[{name:"bamv-ikeda",email:"ikeda@bamv.co.jp",commits:1}]}}},4955:(t,e,a)=>{a.r(e),a.d(e,{default:()=>h});const l=(0,a(6252).uE)('<h1 id="bigqueryからathenaへの移行メモ" tabindex="-1"><a class="header-anchor" href="#bigqueryからathenaへの移行メモ" aria-hidden="true">#</a> BigQueryからAthenaへの移行メモ</h1><h2 id="athenaとは" tabindex="-1"><a class="header-anchor" href="#athenaとは" aria-hidden="true">#</a> Athenaとは？</h2><h3 id="そもそもathenaとは" tabindex="-1"><a class="header-anchor" href="#そもそもathenaとは" aria-hidden="true">#</a> そもそもAthenaとは？</h3><ul><li>S3上のデータに対して、標準SQLにインタラクティブなクエリを投げてデータの分析を行うことができるサービス</li><li>AthenaのクエリエンジンはPrestoをベースにしている</li><li>パフォーマンス向上＆コスト削減目的のため、データをパーティションに分割している</li></ul><h3 id="athenaの特徴" tabindex="-1"><a class="header-anchor" href="#athenaの特徴" aria-hidden="true">#</a> Athenaの特徴</h3><ul><li>サーバーレスでインフラ管理の必要なし</li><li>大規模データに対しても高速なクエリ</li><li>事前のデータロードなしにS3に直接クエリ</li><li>スキャンしたデータに対しての従量課金</li><li>JDBC / API / CLI(CommandLineInterface) からクエリ可能 https://www.slideshare.net/AmazonWebServicesJapan/presto-amazon-athena</li></ul><h3 id="prestoとは" tabindex="-1"><a class="header-anchor" href="#prestoとは" aria-hidden="true">#</a> Prestoとは？</h3><p>https://aws.amazon.com/jp/emr/details/presto/ レイテンシーでアドホックなデータ分析用に最適化されたオープンソースの分散 SQL クエリエンジン</p><ul><li>Facebookが開発している分散SQLエンジン</li><li>ペタスケールのデータに対しインタラクティブ（対話的）な検索が必要に <ul><li>それまではHive中心</li><li>2013年11月オープンソース化</li></ul></li><li>Prestoの特徴 <ul><li>CPU使用効率・スピード重視（アドホック検索）</li><li>インメモリ処理</li><li>Javaによる実装</li><li>教科書的なRDBMSの実装</li><li>ANSI SQLベース</li></ul></li></ul><h1 id="bigqueryからamazon-athenaへのチューニングメモ" tabindex="-1"><a class="header-anchor" href="#bigqueryからamazon-athenaへのチューニングメモ" aria-hidden="true">#</a> BigQueryからAmazon Athenaへのチューニングメモ</h1><h2 id="_1-partitiontimeをdtに変更" tabindex="-1"><a class="header-anchor" href="#_1-partitiontimeをdtに変更" aria-hidden="true">#</a> 1. _PARTITIONTIMEをdtに変更</h2><table><thead><tr><th style="text-align:left;">BigQuery</th><th style="text-align:left;">Athena</th></tr></thead><tbody><tr><td style="text-align:left;">_PARTITIONTIME(timestamp)</td><td style="text-align:left;">dt(varchar)</td></tr></tbody></table><h2 id="_2-format-dateをdate-formatに変更" tabindex="-1"><a class="header-anchor" href="#_2-format-dateをdate-formatに変更" aria-hidden="true">#</a> 2. FORMAT_DATEをDATE_FORMATに変更</h2><p>※関数名だけじゃなく、引数の位置も異なる</p><table><thead><tr><th style="text-align:left;">BigQuery</th><th style="text-align:left;">Athena</th></tr></thead><tbody><tr><td style="text-align:left;">FORMAT_DATE(&#39;%Y-%m-%d&#39;, [日時])</td><td style="text-align:left;">DATE_FORMAT([日時] ,&#39;%Y-%m-%d&#39;)</td></tr></tbody></table><h2 id="_3-現在の日付" tabindex="-1"><a class="header-anchor" href="#_3-現在の日付" aria-hidden="true">#</a> 3. 現在の日付</h2><table><thead><tr><th style="text-align:left;">BigQuery</th><th style="text-align:left;">Athena</th></tr></thead><tbody><tr><td style="text-align:left;">CURRENT_DATE()</td><td style="text-align:left;">CURRENT_DATE</td></tr></tbody></table><h2 id="_4-intervalの直後の数字には-をつける" tabindex="-1"><a class="header-anchor" href="#_4-intervalの直後の数字には-をつける" aria-hidden="true">#</a> 4. INTERVALの直後の数字には&#39; &#39;をつける</h2><table><thead><tr><th style="text-align:left;">BigQuery</th><th style="text-align:left;">Athena</th></tr></thead><tbody><tr><td style="text-align:left;">INTERVAL 3 DAY</td><td style="text-align:left;">INTERVAL &#39;3&#39; DAY</td></tr></tbody></table><h2 id="_5-athenaのintervalはweekが使用できない-ので注意" tabindex="-1"><a class="header-anchor" href="#_5-athenaのintervalはweekが使用できない-ので注意" aria-hidden="true">#</a> 5. AthenaのINTERVALはWEEKが使用できない(?)ので注意</h2><table><thead><tr><th style="text-align:left;">BigQuery</th><th style="text-align:left;">Athena</th></tr></thead><tbody><tr><td style="text-align:left;">INTERVAL 1 WEEK</td><td style="text-align:left;">INTERVAL &#39;7&#39; DAY</td></tr></tbody></table><h2 id="_6-日時の差はathenaは引き算で表示できる" tabindex="-1"><a class="header-anchor" href="#_6-日時の差はathenaは引き算で表示できる" aria-hidden="true">#</a> 6. 日時の差はAthenaは引き算で表示できる</h2><table><thead><tr><th style="text-align:left;">BigQuery</th><th style="text-align:left;">Athena</th></tr></thead><tbody><tr><td style="text-align:left;">DATE_SUB(CURRENT_DATE(),INTERVAL 30 DAY)</td><td style="text-align:left;">CURRENT_DATE - INTERVAL &#39;30&#39; DAY</td></tr></tbody></table><h2 id="_7-athenaでは-hoge-と-hoge-は区別される" tabindex="-1"><a class="header-anchor" href="#_7-athenaでは-hoge-と-hoge-は区別される" aria-hidden="true">#</a> 7. Athenaでは&#39;hoge&#39;と&quot;hoge&quot;は区別される</h2><p>※ダブルクオートの場合、カラムを探しにいく（らしい）</p><table><thead><tr><th style="text-align:left;">BigQuery</th><th style="text-align:left;">Athena</th></tr></thead><tbody><tr><td style="text-align:left;">path = &quot;/images/hoge.gif&quot;</td><td style="text-align:left;">path = &#39;/images/hoge.gif&#39;</td></tr></tbody></table><h2 id="_8-substr-文字列-開始位置-終了位置" tabindex="-1"><a class="header-anchor" href="#_8-substr-文字列-開始位置-終了位置" aria-hidden="true">#</a> 8. SUBSTR([文字列], [開始位置], [終了位置])</h2><p>・開始位置はどちらも1からスタート ・開始位置を0にした場合、BigQueryは1扱いになるが、Prestoだと失敗する（文字列が取得できない）</p><table><thead><tr><th style="text-align:left;">BigQuery</th><th style="text-align:left;">Athena</th></tr></thead><tbody><tr><td style="text-align:left;">SUBSTR(log_time, 0, 13)</td><td style="text-align:left;">SUBSTR(log_time, 1, 13)</td></tr></tbody></table><h2 id="_9-date-log-time-のlog-timeはvarcharなのでcastに失敗するため、timestamp型にcastする※または日時型にトリミングする" tabindex="-1"><a class="header-anchor" href="#_9-date-log-time-のlog-timeはvarcharなのでcastに失敗するため、timestamp型にcastする※または日時型にトリミングする" aria-hidden="true">#</a> 9. DATE(log_time)のlog_timeはvarcharなのでcastに失敗するため、timestamp型にcastする<br>※または日時型にトリミングする</h2><table><thead><tr><th style="text-align:left;">BigQuery</th><th style="text-align:left;">Athena</th></tr></thead><tbody><tr><td style="text-align:left;">DATE(log_time)</td><td style="text-align:left;">DATE(cast(log_time as timestamp))<br>※DATE(SUBSTR(log_time, 1, 13))でも可</td></tr></tbody></table><h2 id="_10-prestoの場合、整数同士の割り算は整数が返却されるため、double型にcastしてから割る" tabindex="-1"><a class="header-anchor" href="#_10-prestoの場合、整数同士の割り算は整数が返却されるため、double型にcastしてから割る" aria-hidden="true">#</a> 10. prestoの場合、整数同士の割り算は整数が返却されるため、DOUBLE型にcastしてから割る<br></h2><table><thead><tr><th style="text-align:left;">BigQuery</th><th style="text-align:left;">Athena</th></tr></thead><tbody><tr><td style="text-align:left;">select (10 / 5)</td><td style="text-align:left;">select (cast(10 as DOUBLE) / 5)</td></tr></tbody></table><h2 id="_11-like-演算子を最適化" tabindex="-1"><a class="header-anchor" href="#_11-like-演算子を最適化" aria-hidden="true">#</a> 11. LIKE 演算子を最適化</h2><table><thead><tr><th style="text-align:left;">BigQuery</th><th style="text-align:left;">Athena</th></tr></thead><tbody><tr><td style="text-align:left;">referer LIKE &#39;%mmid%&#39; OR referer LIKE &#39;%bdid%&#39; OR referer LIKE &#39;%follow_mail%&#39; OR referer LIKE &#39;%target%&#39;)</td><td style="text-align:left;">regexp_like(referer, &#39;mmid |bdid|follow_mail|target&#39;)</td></tr></tbody></table><h2 id="_12-int64はbigintへ変更" tabindex="-1"><a class="header-anchor" href="#_12-int64はbigintへ変更" aria-hidden="true">#</a> 12. int64はBIGINTへ変更</h2><table><thead><tr><th style="text-align:left;">BigQuery</th><th style="text-align:left;">Athena</th></tr></thead><tbody><tr><td style="text-align:left;">int64</td><td style="text-align:left;">BIGINT</td></tr></tbody></table>',37),i={},h=(0,a(3744).Z)(i,[["render",function(t,e){return l}]])},3744:(t,e)=>{e.Z=(t,e)=>{const a=t.__vccOpts||t;for(const[t,l]of e)a[t]=l;return a}}}]);