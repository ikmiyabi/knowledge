"use strict";(self.webpackChunkvuepress_sample2=self.webpackChunkvuepress_sample2||[]).push([[1206],{783:(e,i,l)=>{l.r(i),l.d(i,{data:()=>a});const a={key:"v-0a851939",path:"/backend/java/%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6.html",title:"",lang:"ja",frontmatter:{},excerpt:"",headers:[{level:2,title:"開発のコード量を減らす為の３つの知識",slug:"開発のコード量を減らす為の3つの知識",children:[]},{level:2,title:"ライブラリとは？",slug:"ライブラリとは",children:[]},{level:2,title:"フレームワークとは？",slug:"フレームワークとは",children:[]},{level:2,title:"API(Application Programming Interface)",slug:"api-application-programming-interface",children:[]},{level:2,title:"Spring Frameworkの特徴",slug:"spring-frameworkの特徴",children:[]}],filePathRelative:"backend/java/フレームワークについて.md",git:{updatedTime:1639532968e3,contributors:[{name:"bamv-ikeda",email:"ikeda@bamv.co.jp",commits:1}]}}},5705:(e,i,l)=>{l.r(i),l.d(i,{default:()=>n});const a=(0,l(6252).uE)('<h2 id="開発のコード量を減らす為の3つの知識" tabindex="-1"><a class="header-anchor" href="#開発のコード量を減らす為の3つの知識" aria-hidden="true">#</a> 開発のコード量を減らす為の３つの知識</h2><ul><li>ライブラリ</li><li>フレームワーク</li><li>API</li></ul><h2 id="ライブラリとは" tabindex="-1"><a class="header-anchor" href="#ライブラリとは" aria-hidden="true">#</a> ライブラリとは？</h2><ul><li>他の人が書いたソースコードを活用できる仕組み</li><li>他の人が書いたライブラリを自分の書いているコードに組み込むことによって実装する</li></ul><h2 id="フレームワークとは" tabindex="-1"><a class="header-anchor" href="#フレームワークとは" aria-hidden="true">#</a> フレームワークとは？</h2><ul><li>アプリケーションを作るために必要な機能をまとめて提供する一定の枠組み</li><li>共通のルールに則って作成すれば、比較的簡単にアプリケーションを作ることができる</li></ul><h2 id="api-application-programming-interface" tabindex="-1"><a class="header-anchor" href="#api-application-programming-interface" aria-hidden="true">#</a> API(Application Programming Interface)</h2><ul><li>外部で提供しているサービスの一部の機能を借りてくるというイメージ</li><li>GoogleMapのAPIなど</li></ul><h2 id="spring-frameworkの特徴" tabindex="-1"><a class="header-anchor" href="#spring-frameworkの特徴" aria-hidden="true">#</a> Spring Frameworkの特徴</h2><ul><li>変更に強い <ul><li>DI（Dependency Injection：依存性の注入）という仕組みが導入されている為変更に強い</li></ul></li><li>テストが簡単 <ul><li>Spring MVC Testのという専用のテストプログラムを使うことができる</li></ul></li><li>拡張性が高い</li><li>保守性が高い <ul><li>AOP（Aspect Oriented Programming）というプログラミングを用いることができる。</li><li>クラスには本質的な処置のみを書いて、本質的ではない処理（共通化できる処理）は別に書くというやり方。コードがわかりやすくする効果がある。</li><li>バグや不具合があった際に原因を特定しやすくなる。</li></ul></li></ul>',10),r={},n=(0,l(3744).Z)(r,[["render",function(e,i){return a}]])},3744:(e,i)=>{i.Z=(e,i)=>{const l=e.__vccOpts||e;for(const[e,a]of i)l[e]=a;return l}}}]);