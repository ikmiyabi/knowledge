"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[4408],{888:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-432cdb0e",path:"/backend/java/%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%A8%E3%81%AF.html",title:"メソッド(method)とは",lang:"ja",frontmatter:{},excerpt:"",headers:[{level:2,title:"メソッドの定義",slug:"メソッドの定義",children:[]},{level:2,title:"引数",slug:"引数",children:[]},{level:2,title:"ローカル変数",slug:"ローカル変数",children:[]}],filePathRelative:"backend/java/メソッドとは.md",git:{updatedTime:1639532968e3,contributors:[{name:"bamv-ikeda",email:"ikeda@bamv.co.jp",commits:1}]}}},3448:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(6252).uE)('<h1 id="メソッド-method-とは" tabindex="-1"><a class="header-anchor" href="#メソッド-method-とは" aria-hidden="true">#</a> メソッド(method)とは</h1><h2 id="メソッドの定義" tabindex="-1"><a class="header-anchor" href="#メソッドの定義" aria-hidden="true">#</a> メソッドの定義</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// メソッドが呼び出された刻に実行される処理</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>public</code> の部分をアクセス修飾子（Access Control）を記述</li><li><code>void</code>の部分は戻り値の型を記述</li><li><code>main</code> の部分はメソッド名を記述</li><li><code>String[] </code>の部分には引数の型を記述</li><li><code>args</code> の部分は引数（仮引数）を記述</li><li><code>main(String[] args)</code> の部分をまとめてシグネチャ（signature）という</li></ul><h2 id="引数" tabindex="-1"><a class="header-anchor" href="#引数" aria-hidden="true">#</a> 引数</h2><ul><li>引数とはメソッドに渡す値のこと</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 関数側で定義する引数は仮引数という</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&#39;さん、こんにちは&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 実際に渡す引数を実引数という</span>\n<span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="ローカル変数" tabindex="-1"><a class="header-anchor" href="#ローカル変数" aria-hidden="true">#</a> ローカル変数</h2><ul><li>メソッド内で定義した変数をローカル変数という</li><li>ローカル変数の有効範囲はメソッド内でのみ有効で、この範囲をローカル変数のスコープという</li><li>以下は呼び出そうとしている変数がスコープ外のため、コンパイルエラーとなる</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> numberA <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> numberB <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token function">plusNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">plusNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> answer <span class="token operator">=</span> numberA <span class="token operator">+</span> numberB<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',10),p={},t=(0,a(3744).Z)(p,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);