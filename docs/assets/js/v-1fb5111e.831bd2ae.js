"use strict";(self.webpackChunkvuepress_sample2=self.webpackChunkvuepress_sample2||[]).push([[3918],{1528:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-1fb5111e",path:"/backend/java/%E3%80%90Java8%E3%80%91Optional%E3%82%AF%E3%83%A9%E3%82%B9.html",title:"Java8: Optionalについて",lang:"ja",frontmatter:{},excerpt:"",headers:[],filePathRelative:"backend/java/【Java8】Optionalクラス.md",git:{updatedTime:1639532968e3,contributors:[{name:"bamv-ikeda",email:"ikeda@bamv.co.jp",commits:1}]}}},9262:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});const p=(0,a(6252).uE)('<h1 id="java8-optionalについて" tabindex="-1"><a class="header-anchor" href="#java8-optionalについて" aria-hidden="true">#</a> Java8: Optionalについて</h1><ul><li>Optionalクラスを用いると、</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// before</span>\n<span class="token class-name">Company</span> manufactureCompany <span class="token operator">=</span> <span class="token class-name">Company</span><span class="token punctuation">.</span>findByRootId$<span class="token class-name">SiteType</span><span class="token punctuation">(</span>companyRootId<span class="token punctuation">,</span> <span class="token class-name">SiteType</span><span class="token punctuation">.</span>MANUFACTURE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>manufactureCompany <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;データ不整合 SUBテーブルにデータがありません。 companyRootId:[&quot;</span><span class="token operator">+</span>companyRootId<span class="token operator">+</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// after</span>\n<span class="token comment">// 値をラップする</span>\n<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Company</span><span class="token punctuation">&gt;</span></span> opt <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token class-name">Company</span><span class="token punctuation">.</span>findByRootId$<span class="token class-name">SiteType</span><span class="token punctuation">(</span>companyRootId<span class="token punctuation">,</span> <span class="token class-name">SiteType</span><span class="token punctuation">.</span>MANUFACTURE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// エクセプションが発生する場合の処理を指定する</span>\n<span class="token class-name">Company</span> manufactureCompany <span class="token operator">=</span> opt<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;データ不整合 SUBテーブルにデータがありません。 companyRootId:[&quot;</span><span class="token operator">+</span>companyRootId<span class="token operator">+</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// さらにまとめる</span>\n<span class="token class-name">Company</span> manufactureCompany <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Company</span><span class="token punctuation">.</span>findByRootId$<span class="token class-name">SiteType</span><span class="token punctuation">(</span>companyRootId<span class="token punctuation">,</span> <span class="token class-name">SiteType</span><span class="token punctuation">.</span>MANUFACTURE<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;データ不整合 SUBテーブルにデータがありません。 companyRootId:[&quot;</span><span class="token operator">+</span>companyRootId<span class="token operator">+</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>しかしJavaのOptionalは引数やフィールドに使うことは想定されていないらしく、メソッドの戻り値として使うことが想定されているらしい。 上記の作りの場合あくまで、.orElseThrow()が使えてnullチェックができるだけのもので、結局わかりにくくなってるだけじゃね？感がある。 以下のように呼び出し元ではなく、呼び出し先で戻り値にして記述することで呼び出し元にnullを考慮したコーディングを強制することができる。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Company.java</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Company</span><span class="token punctuation">&gt;</span></span> findByRootId$<span class="token class-name">SiteType</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> rootId<span class="token punctuation">,</span> <span class="token class-name">SiteType</span> siteType<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token function">companyRootId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rootId<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">eq</span><span class="token punctuation">(</span><span class="token function">siteType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>siteType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// メソッドを呼び出す</span>\n<span class="token class-name">Company</span> manufactureCompany <span class="token operator">=</span> <span class="token class-name">Company</span><span class="token punctuation">.</span>findByRootId$<span class="token class-name">SiteType</span><span class="token punctuation">(</span>companyRootId<span class="token punctuation">,</span> <span class="token class-name">SiteType</span><span class="token punctuation">.</span>MANUFACTURE<span class="token punctuation">)</span>\n    \t<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;データ不整合 SUBテーブルにデータがありません。 companyRootId:[&quot;</span><span class="token operator">+</span>companyRootId<span class="token operator">+</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',5),t={},o=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);