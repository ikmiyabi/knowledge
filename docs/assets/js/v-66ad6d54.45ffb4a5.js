"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[2935],{3288:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-66ad6d54",path:"/other/shellscript/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AE%E5%9F%BA%E6%9C%AC.html",title:"シェルスクリプトの基本",lang:"ja",frontmatter:{},excerpt:"",headers:[{level:2,title:"シェバン（shebang）",slug:"シェバン-shebang",children:[]},{level:2,title:"if文",slug:"if文",children:[]},{level:2,title:"比較",slug:"比較",children:[]},{level:2,title:"switch",slug:"switch",children:[]},{level:2,title:"実行コマンド",slug:"実行コマンド",children:[]},{level:2,title:"文字列表記",slug:"文字列表記",children:[]},{level:2,title:"コマンド置換",slug:"コマンド置換",children:[]},{level:2,title:"コマンド紹介",slug:"コマンド紹介",children:[]},{level:2,title:"標準出力、標準エラーを捨てる",slug:"標準出力、標準エラーを捨てる",children:[]}],filePathRelative:"other/shellscript/シェルスクリプトの基本.md",git:{updatedTime:1639532968e3,contributors:[{name:"bamv-ikeda",email:"ikeda@bamv.co.jp",commits:1}]}}},8579:(s,n,a)=>{a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="シェルスクリプトの基本" tabindex="-1"><a class="header-anchor" href="#シェルスクリプトの基本" aria-hidden="true">#</a> シェルスクリプトの基本</h1><h2 id="シェバン-shebang" tabindex="-1"><a class="header-anchor" href="#シェバン-shebang" aria-hidden="true">#</a> シェバン（shebang）</h2><ul><li>使用するインタプリタを指定するもの(コメントではない)</li><li>シェバン(shebang)と呼ばれている</li><li>2行目にはエンコードを記述する</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>\n<span class="token comment"># encoding: utf-8</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="if文" tabindex="-1"><a class="header-anchor" href="#if文" aria-hidden="true">#</a> if文</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$foo</span> <span class="token operator">=</span> bar <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>\n  <span class="token comment"># 処理</span>\n<span class="token keyword">fi</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="比較" tabindex="-1"><a class="header-anchor" href="#比較" aria-hidden="true">#</a> 比較</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$foo</span> -gt bar <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>\n  <span class="token comment"># $fooがbarより大きい場合に実行される処理</span>\n<span class="token keyword">fi</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$foo</span> -lt bar <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>\n  <span class="token comment"># $fooがbar以下である場合に実行される処理</span>\n<span class="token keyword">fi</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> switch</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">case</span> <span class="token string">&quot;<span class="token variable">$fruit</span>&quot;</span> <span class="token keyword">in</span>\n  <span class="token string">&quot;apple&quot;</span> <span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;appleです&quot;</span><span class="token punctuation">;</span><span class="token punctuation">;</span>\n  <span class="token string">&quot;orange&quot;</span> <span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;orangeです&quot;</span><span class="token punctuation">;</span><span class="token punctuation">;</span>\n  <span class="token string">&quot;banana&quot;</span> <span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;bananaです&quot;</span><span class="token punctuation">;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="実行コマンド" tabindex="-1"><a class="header-anchor" href="#実行コマンド" aria-hidden="true">#</a> 実行コマンド</h2><p>bashでscript.shを実行する場合を想定</p><table><thead><tr><th style="text-align:center;">コマンド</th><th style="text-align:center;">意味</th></tr></thead><tbody><tr><td style="text-align:center;"><code>source script.sh</code></td><td style="text-align:center;">コマンドを実行した現在のシェルのプロセスを用いてスクリプトを実行する</td></tr><tr><td style="text-align:center;"><code>. script.sh</code></td><td style="text-align:center;"><code>source</code>コマンドのエイリアス</td></tr><tr><td style="text-align:center;"><code>sh script.sh</code></td><td style="text-align:center;">shell(bourne shell)で別プロセスを立ち上げ、スクリプトを実行する</td></tr><tr><td style="text-align:center;"><code>bash script.sh</code></td><td style="text-align:center;">bashで別プロセスを立ち上げ、スクリプトを実行する</td></tr><tr><td style="text-align:center;"><code>./script.sh</code><br>（ファイルパスをそのまま入力）</td><td style="text-align:center;"><code>bash script.sh</code>と同様bashで別プロセスを立ち上げ、スクリプトを実行する<br>実行権限が必要</td></tr><tr><td style="text-align:center;"><code>exec script.sh</code></td><td style="text-align:center;">別プロセスでスクリプトを実行してプロセスを終了する</td></tr></tbody></table><ul><li><code>.</code>、<code>source</code> コマンドでは、実行したシェルから実行される(設定などは引き継がれる)</li><li>直接実行した場合は別シェルで実行する(実行シェルはシェバンに従う)</li><li>execコマンドは、スクリプトを実行してプロセスを終了する</li></ul><h2 id="文字列表記" tabindex="-1"><a class="header-anchor" href="#文字列表記" aria-hidden="true">#</a> 文字列表記</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># ダブルクォート&quot;&quot;の場合は変数を使用出来る</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token comment"># シングルクォートの場合は完全に文字列として扱う</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&#39;hello&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="コマンド置換" tabindex="-1"><a class="header-anchor" href="#コマンド置換" aria-hidden="true">#</a> コマンド置換</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 使用例</span>\n<span class="token function">git</span> pull origin <span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> rev-parse --abbref HEAD<span class="token variable">)</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>コマンド置換にはバッククオート``を使用する方法と、$()を使用する方法があるが、ネスト出来ることから$()を使用する方が良い場合が多い</li></ul><h2 id="コマンド紹介" tabindex="-1"><a class="header-anchor" href="#コマンド紹介" aria-hidden="true">#</a> コマンド紹介</h2><table><thead><tr><th style="text-align:center;">コマンド</th><th style="text-align:center;">意味</th></tr></thead><tbody><tr><td style="text-align:center;"><code>type</code></td><td style="text-align:center;">コマンドの存在チェック</td></tr><tr><td style="text-align:center;"><code>set</code></td><td style="text-align:center;">設定されているシェル変数を表示</td></tr><tr><td style="text-align:center;"><code>printenv</code></td><td style="text-align:center;">設定されている環境変数を一覧を表示</td></tr><tr><td style="text-align:center;"><code>env</code></td><td style="text-align:center;">設定されている環境変数の一覧を表示<br>特定のコマンドのみ有効な環境変数を設定</td></tr><tr><td style="text-align:center;"><code>export</code></td><td style="text-align:center;">環境変数の一覧を表示<br>引数を指定した場合、環境変数を設定</td></tr><tr><td style="text-align:center;"><code>basename [パス]</code></td><td style="text-align:center;">ファイル名を出力</td></tr></tbody></table><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 第二引数に指定した文字列は除外して表示できる</span>\n<span class="token function">basename</span> ~/<span class="token punctuation">..</span>./hoge_exec.sh _exec.sh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="標準出力、標準エラーを捨てる" tabindex="-1"><a class="header-anchor" href="#標準出力、標準エラーを捨てる" aria-hidden="true">#</a> 標準出力、標準エラーを捨てる</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol><li><code>&gt;/dev/null</code>で出力先を<code>/dev/null</code>に設定</li><li>標準エラー出力を標準出力と同じ出力先に設定</li></ol><h1 id="fizzbuzz" tabindex="-1"><a class="header-anchor" href="#fizzbuzz" aria-hidden="true">#</a> fizzbuzz</h1><ul><li>基本</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span>$i <span class="token operator">%</span> <span class="token number">15</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n    <span class="token builtin class-name">echo</span> FizzBuzz\n  <span class="token keyword">elif</span> <span class="token variable"><span class="token punctuation">((</span>$i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n    <span class="token builtin class-name">echo</span> Fizz\n  <span class="token keyword">elif</span> <span class="token variable"><span class="token punctuation">((</span>$i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n    <span class="token builtin class-name">echo</span> Buzz\n  <span class="token keyword">else</span>\n    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span>\n  <span class="token keyword">fi</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>基本 ver.2</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">do</span>\n  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$((</span>i <span class="token operator">%</span> <span class="token number">15</span><span class="token variable">))</span></span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n    <span class="token builtin class-name">echo</span> FizzBuzz\n  <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$((</span>i <span class="token operator">%</span> <span class="token number">3</span><span class="token variable">))</span></span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n    <span class="token builtin class-name">echo</span> Fizz\n  <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$((</span>i <span class="token operator">%</span> <span class="token number">5</span><span class="token variable">))</span></span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n    <span class="token builtin class-name">echo</span> Buzz\n  <span class="token keyword">else</span>\n    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span>\n  <span class="token keyword">fi</span>\n<span class="token keyword">done</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li></li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">do</span>\n  <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$((</span>i <span class="token operator">%</span> <span class="token number">15</span><span class="token variable">))</span></span> -eq <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> FizzBuzz <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">continue</span>\n  <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$((</span>i <span class="token operator">%</span> <span class="token number">3</span><span class="token variable">))</span></span> -eq <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> Fizz <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">continue</span>\n  <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$((</span>i <span class="token operator">%</span> <span class="token number">5</span><span class="token variable">))</span></span> -eq <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> Buzz <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">continue</span>\n  <span class="token builtin class-name">echo</span> <span class="token variable">$i</span>\n<span class="token keyword">done</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>shell芸</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">seq</span> <span class="token number">100</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;$1%15==0{print &quot;FizzBuzz&quot;}$1%3==0&amp;&amp;$1%5!=0{print &quot;Fizz&quot;}$1%3!=0&amp;&amp;$1%5==0{print &quot;Buzz&quot;}$1%3!=0&amp;&amp;$1%5!=0{print $1}&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',35),t={},p=(0,a(3744).Z)(t,[["render",function(s,n){return e}]])},3744:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);