"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[2720],{5190:(l,i,e)=>{e.r(i),e.d(i,{data:()=>a});const a={key:"v-3f074163",path:"/other/other/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%83%AA%E3%82%B9%E3%83%88.html",title:"リーダブルコード適用チェックリスト",lang:"ja",frontmatter:{},excerpt:"",headers:[{level:2,title:"リーダブルコード目次",slug:"リーダブルコード目次",children:[{level:3,title:"1章 理解しやすいコード",slug:"_1章-理解しやすいコード",children:[]},{level:3,title:"2章 名前に情報を詰め込む",slug:"_2章-名前に情報を詰め込む",children:[]},{level:3,title:"3章 誤解されない名前",slug:"_3章-誤解されない名前",children:[]},{level:3,title:"4章 美しさ",slug:"_4章-美しさ",children:[]},{level:3,title:"5章 コメントすべきことを知る",slug:"_5章-コメントすべきことを知る",children:[]},{level:3,title:"6章 コメントは正確で簡潔に",slug:"_6章-コメントは正確で簡潔に",children:[]},{level:3,title:"7章 ループとロジックの単純化",slug:"_7章-ループとロジックの単純化",children:[]},{level:3,title:"8章 巨大な式を分割する",slug:"_8章-巨大な式を分割する",children:[]},{level:3,title:"9章 変数と読みやすさ",slug:"_9章-変数と読みやすさ",children:[]},{level:3,title:"10章 無関係の下位問題を抽出する",slug:"_10章-無関係の下位問題を抽出する",children:[]},{level:3,title:"11章 一度に１つのことを",slug:"_11章-一度に1つのことを",children:[]},{level:3,title:"12章 コードに思いを込める",slug:"_12章-コードに思いを込める",children:[]},{level:3,title:"13章 短いコードを書く",slug:"_13章-短いコードを書く",children:[]},{level:3,title:"14章 テストと読みやすさ",slug:"_14章-テストと読みやすさ",children:[]}]}],filePathRelative:"other/other/リファクタリングチェックリスト.md",git:{updatedTime:1639532968e3}}},6488:(l,i,e)=>{e.r(i),e.d(i,{default:()=>r});const a=(0,e(6252).uE)('<h1 id="リーダブルコード適用チェックリスト" tabindex="-1"><a class="header-anchor" href="#リーダブルコード適用チェックリスト" aria-hidden="true">#</a> リーダブルコード適用チェックリスト</h1><p>このチェックリストはリーダブルコードに連動した、リファクタリングに必要な観点をまとめたチェックリストです。 リファクタリングをする際のチェックリストとしてご利用下さい。</p><h2 id="リーダブルコード目次" tabindex="-1"><a class="header-anchor" href="#リーダブルコード目次" aria-hidden="true">#</a> リーダブルコード目次</h2><h3 id="_1章-理解しやすいコード" tabindex="-1"><a class="header-anchor" href="#_1章-理解しやすいコード" aria-hidden="true">#</a> 1章 理解しやすいコード</h3><h3 id="_2章-名前に情報を詰め込む" tabindex="-1"><a class="header-anchor" href="#_2章-名前に情報を詰め込む" aria-hidden="true">#</a> 2章 名前に情報を詰め込む</h3><ul><li>明確な単語を選んでいること</li><li>tmpやretvalなどの汎用的な名前になっていないこと</li><li>具体的な名前を使って、物事を詳細に説明していること</li><li>変数名に大切な情報を追加していること</li><li>スコープの大きな変数には長い名前をつけていること</li><li>独自の省略規則を用いていないこと</li></ul><h3 id="_3章-誤解されない名前" tabindex="-1"><a class="header-anchor" href="#_3章-誤解されない名前" aria-hidden="true">#</a> 3章 誤解されない名前</h3><ul><li>誤解されない名前をつけていること <ul><li>限界値を含めるときはminとmaxを使う</li><li>範囲を指定するときはfirstとlastを使う</li><li>包含／排他的範囲にはbeginとendを使う</li><li>ブール値の変数名は頭にis・has・can・shouldなどをつけて分かりやすくすること</li><li>ユーザーの期待に合わせた変数名になっていること（get()やsize()には軽量なメソッドが期待されている）</li></ul></li></ul><h3 id="_4章-美しさ" tabindex="-1"><a class="header-anchor" href="#_4章-美しさ" aria-hidden="true">#</a> 4章 美しさ</h3><ul><li>改行位置が一貫していること</li><li>メソッドを使って重複を排除できる箇所は</li><li>一貫性と意味のある並びになっていること</li><li>宣言がブロックにまとめられていること</li><li>論理的なブロックは、空行を使ってまとめられていること</li><li>スタイルに一貫性があること</li></ul><h3 id="_5章-コメントすべきことを知る" tabindex="-1"><a class="header-anchor" href="#_5章-コメントすべきことを知る" aria-hidden="true">#</a> 5章 コメントすべきことを知る</h3><ul><li>コメントすべきではないこと <ul><li>コードからすぐに抽出出来ること</li><li>ひどい名前の関数を補うコメントはせず、コードを修正すること</li></ul></li><li>コメントのためのコメントをしていないこと</li><li>定数の値にまつわる背景</li><li>自分の考えを記録していること（なぜコードがこうなっているのか）</li><li>コードの欠陥にコメントをつけていること</li><li>ハマりそうな罠を告知していること</li><li>ファイルやクラスには全体像のコメントをしていること</li><li>読み手が細部に捕らわれないようにコードブロックに概要をまとめていること</li></ul><h3 id="_6章-コメントは正確で簡潔に" tabindex="-1"><a class="header-anchor" href="#_6章-コメントは正確で簡潔に" aria-hidden="true">#</a> 6章 コメントは正確で簡潔に</h3><ul><li>簡潔であること</li><li>関数の動作はできるだけ正確に説明していること</li><li>曖昧な代名詞を避けること</li><li>コードの意図を書く</li></ul><h3 id="_7章-ループとロジックの単純化" tabindex="-1"><a class="header-anchor" href="#_7章-ループとロジックの単純化" aria-hidden="true">#</a> 7章 ループとロジックの単純化</h3><ul><li>条件式の並び順は、左側に「調査対象（変化する）」、右側に「比較対象（変化しない）」となっていること</li><li>三項演算子はそれによって簡潔になるときにだけ使い、基本的にはif/elseを使うこと</li><li>do/whileループを避けること</li><li>関数から早く返すこと（早期リターン）</li><li>gotoは基本的に使わないこと</li><li>ネストを浅くすること</li></ul><h3 id="_8章-巨大な式を分割する" tabindex="-1"><a class="header-anchor" href="#_8章-巨大な式を分割する" aria-hidden="true">#</a> 8章 巨大な式を分割する</h3><ul><li>説明変数を用いること</li><li>要約変数を用いること</li><li>二重否定の条件式にはド・モルガンの法則を用いること</li></ul><h3 id="_9章-変数と読みやすさ" tabindex="-1"><a class="header-anchor" href="#_9章-変数と読みやすさ" aria-hidden="true">#</a> 9章 変数と読みやすさ</h3><ul><li>不要な変数を削除すること <ul><li>複雑な式を分割していない</li><li>重複コードの削除になっていない</li></ul></li><li>制御フロー変数を削除する</li><li>変数のスコープはできるだけ縮めること</li><li>変数の定義は変数を使う直前に移動すること</li><li>変数は一度だけ書き込むようにすること（変数を操作する場所が増えると、現在地の判断が難しくなる）</li><li>できるだけイミュータブルな変数を用いること</li></ul><h3 id="_10章-無関係の下位問題を抽出する" tabindex="-1"><a class="header-anchor" href="#_10章-無関係の下位問題を抽出する" aria-hidden="true">#</a> 10章 無関係の下位問題を抽出する</h3><ul><li>無関係の下位問題を抽出すること <ol><li>コードの高レベルな目標は何かを自問する</li><li>コードを高レベルの目標に直接効果があるのか、無関係の下位問題を解決しているのか自問する</li><li>無関係の下位問題を解決しているコードがあれ相当量あればそれらを抽出して別の関数にする</li></ol></li><li>疎結合な汎用コードをたくさん作る</li><li>既存のインターフェースをラップした関数を作り簡潔にする</li><li>やりすぎには注意</li></ul><h3 id="_11章-一度に1つのことを" tabindex="-1"><a class="header-anchor" href="#_11章-一度に1つのことを" aria-hidden="true">#</a> 11章 一度に１つのことを</h3><ul><li>一度に１つのタスクを行う構成となっていること <ul><li>読みにくいコードがあれば、そこで行われているタスクをすべて列挙し、別の関数に分割できるタスクを分割する</li></ul></li></ul><h3 id="_12章-コードに思いを込める" tabindex="-1"><a class="header-anchor" href="#_12章-コードに思いを込める" aria-hidden="true">#</a> 12章 コードに思いを込める</h3><ul><li>コードを書く前にロジックを説明する文章を考えてコードを書くこと</li></ul><h3 id="_13章-短いコードを書く" tabindex="-1"><a class="header-anchor" href="#_13章-短いコードを書く" aria-hidden="true">#</a> 13章 短いコードを書く</h3><ul><li>汎用的なユーティリティを作って使い回すこと</li><li>表陣ライブラリのAPIや汎用ライブラリを広く知っておくこと</li><li>未使用のコードや無用の機能を削除すること</li><li>たまには標準ライブラリのすべての関数・モジュール・型の名前を15分かけて読んでみること</li></ul><h3 id="_14章-テストと読みやすさ" tabindex="-1"><a class="header-anchor" href="#_14章-テストと読みやすさ" aria-hidden="true">#</a> 14章 テストと読みやすさ</h3><ul><li>最小のテストコードを作ること（テストの本質は1行にまとめることができる） <ul><li>「こういう状況と入力から、こういう振る舞いと出力を期待する」のレベルまで要約できる。</li></ul></li><li>より良いライブラリを探し、エラーメッセージを読みやすくすること</li><li>テストの適切な入力値を選択すること</li><li>入力値を単純化すること</li><li>テストの機能に名前を付けること <ul><li>Test_関数名_状況()（Test_SortAndFilterDocs(), Test_SortAndFilterDocs_BasicSorting()など）</li></ul></li><li>テストの為に本物のコードを犠牲にしていないこと</li></ul>',30),h={},r=(0,e(3744).Z)(h,[["render",function(l,i){return a}]])},3744:(l,i)=>{i.Z=(l,i)=>{const e=l.__vccOpts||l;for(const[l,a]of i)e[l]=a;return e}}}]);