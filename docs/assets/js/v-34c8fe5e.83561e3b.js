"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[8909],{4827:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-34c8fe5e",path:"/backend/c-sharp/C%EF%BC%83%E3%81%AE%E5%9F%BA%E7%A4%8E.html",title:"C#の基礎",lang:"ja",frontmatter:{},excerpt:"",headers:[{level:2,title:"C#の基本構造",slug:"c-の基本構造",children:[]},{level:2,title:"変数の型",slug:"変数の型",children:[]}],filePathRelative:"backend/c-sharp/C＃の基礎.md",git:{updatedTime:1639532968e3}}},2396:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="c-の基礎" tabindex="-1"><a class="header-anchor" href="#c-の基礎" aria-hidden="true">#</a> C#の基礎</h1><h2 id="c-の基本構造" tabindex="-1"><a class="header-anchor" href="#c-の基本構造" aria-hidden="true">#</a> C#の基本構造</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>\n\n<span class="token keyword">namespace</span> <span class="token namespace">ConsoleApp</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">class</span> <span class="token class-name">Program</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, C#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ul><li>using句で利用する機能を宣言する</li><li>名前空間(namespace)</li><li>クラスを定義</li><li>メソッドを定義</li></ul><h2 id="変数の型" tabindex="-1"><a class="header-anchor" href="#変数の型" aria-hidden="true">#</a> 変数の型</h2><table><thead><tr><th style="text-align:center;">変数の型</th><th style="text-align:center;"></th></tr></thead><tbody><tr><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>double</code></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>string</code></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>char</code></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"></td></tr></tbody></table>',6),t={},p=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);