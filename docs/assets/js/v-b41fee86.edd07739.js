"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[4850],{6406:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-b41fee86",path:"/backend/ruby/ruby%E3%83%A1%E3%83%A2.html",title:"rubyメモ",lang:"ja",frontmatter:{},excerpt:"",headers:[{level:2,title:"使ってみて思うこと",slug:"使ってみて思うこと",children:[]},{level:2,title:"文字列展開には+ではなく#{}を使うこと",slug:"文字列展開には-ではなく-を使うこと",children:[]},{level:2,title:"シェルコマンドは``(バッククオート)で実行できる",slug:"シェルコマンドは-バッククオート-で実行できる",children:[]},{level:2,title:"require, require-relativeの違い",slug:"require-require-relativeの違い",children:[]},{level:2,title:"環境変数を呼び出す",slug:"環境変数を呼び出す",children:[]},{level:2,title:"p, puts, printの違い",slug:"p-puts-printの違い",children:[]},{level:2,title:"stringの連結",slug:"stringの連結",children:[]},{level:2,title:"||=とは",slug:"とは",children:[]},{level:2,title:"シンボルとは",slug:"シンボルとは",children:[]},{level:2,title:"ベンチマークの取り方",slug:"ベンチマークの取り方",children:[]},{level:2,title:"CSVファイルを読み込む",slug:"csvファイルを読み込む",children:[]},{level:2,title:"シングルクォート、ダブルクォートの使い分け",slug:"シングルクォート、ダブルクォートの使い分け",children:[]}],filePathRelative:"backend/ruby/rubyメモ.md",git:{updatedTime:1639532968e3}}},4639:(s,n,a)=>{a.r(n),a.d(n,{default:()=>l});const e=(0,a(6252).uE)('<h1 id="rubyメモ" tabindex="-1"><a class="header-anchor" href="#rubyメモ" aria-hidden="true">#</a> rubyメモ</h1><h2 id="使ってみて思うこと" tabindex="-1"><a class="header-anchor" href="#使ってみて思うこと" aria-hidden="true">#</a> 使ってみて思うこと</h2><ul><li>書き方がいろいろあるため、コードの質がピンキリになる。書き手によって可読性・保守性が大きく変わってしまう。</li><li>標準ライブラリが充実している</li><li>||=、#{}など、記号が多く、検索するのが難しい場合がある</li><li>Railsが便利</li><li>javaよりコマンドラインとの連携が容易</li><li>ENV[]、irbなど</li><li>定数の扱いが難しい <ul><li>いちいちfreezeが必要だったり・・・</li></ul></li></ul><h2 id="文字列展開には-ではなく-を使うこと" tabindex="-1"><a class="header-anchor" href="#文字列展開には-ではなく-を使うこと" aria-hidden="true">#</a> 文字列展開には+ではなく#{}を使うこと</h2><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>name <span class="token operator">=</span> <span class="token string">&quot;hoge&quot;</span>\nputs <span class="token string">&quot;hello, &quot;</span> <span class="token operator">+</span> name\n<span class="token comment">#=&gt; hello, hoge</span>\n\nputs <span class="token string">&quot;hello, <span class="token interpolation"><span class="token delimiter tag">#{</span>hoge<span class="token delimiter tag">}</span></span>&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>メリットは、可読性の向上とto_sを自動で行ってくれること</li></ul><h2 id="シェルコマンドは-バッククオート-で実行できる" tabindex="-1"><a class="header-anchor" href="#シェルコマンドは-バッククオート-で実行できる" aria-hidden="true">#</a> シェルコマンドは``(バッククオート)で実行できる</h2><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code><span class="token comment"># lsコマンドをruby上で実行</span>\nputs `ls`\n\n<span class="token comment"># サブシェルを実行</span>\nputs system <span class="token punctuation">(</span>ls<span class="token punctuation">)</span>\n\n<span class="token comment"># 実行して終了する</span>\nputs exec <span class="token punctuation">(</span>ls<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="require-require-relativeの違い" tabindex="-1"><a class="header-anchor" href="#require-require-relativeの違い" aria-hidden="true">#</a> require, require-relativeの違い</h2><ul><li>requireは外部ファイルの読み込みを行う</li><li>require-relativeは実行ファイルの相対パスを指定</li></ul><p>※拡張子は省略可能</p><h2 id="環境変数を呼び出す" tabindex="-1"><a class="header-anchor" href="#環境変数を呼び出す" aria-hidden="true">#</a> 環境変数を呼び出す</h2><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>puts <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">&#39;PATH&#39;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="p-puts-printの違い" tabindex="-1"><a class="header-anchor" href="#p-puts-printの違い" aria-hidden="true">#</a> p, puts, printの違い</h2><table><thead><tr><th style="text-align:center;">コマンド</th><th style="text-align:center;">内容</th></tr></thead><tbody><tr><td style="text-align:center;"><code>p</code></td><td style="text-align:center;">値と型の情報を出力。デバッグ用</td></tr><tr><td style="text-align:center;"><code>puts</code></td><td style="text-align:center;">内容を標準出力（改行有り）</td></tr><tr><td style="text-align:center;"><code>print</code></td><td style="text-align:center;">内容を標準出力（改行無し）</td></tr></tbody></table><p>※pは戻り値も返す。puts, printはなし</p><h2 id="stringの連結" tabindex="-1"><a class="header-anchor" href="#stringの連結" aria-hidden="true">#</a> stringの連結</h2><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>str <span class="token operator">=</span> <span class="token string">&quot;hoge&quot;</span>\nstr <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">&quot;fuga&quot;</span>\nputs str\n<span class="token comment">#=&gt; hogefuga</span>\n\nstr<span class="token operator">=</span><span class="token string">&quot;foo&quot;</span>\nstr <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token string">&quot;bar&quot;</span>\nputs str\n<span class="token comment">#=&gt; foobar</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="とは" tabindex="-1"><a class="header-anchor" href="#とは" aria-hidden="true">#</a> ||=とは</h2><ul><li>値がnilであれば値を代入し、何か入っていれば何もしない</li></ul><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>hoge <span class="token operator">=</span> <span class="token keyword">nil</span>\nfoo <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span>\n\nputs <span class="token string">&quot;hoge =&gt; <span class="token interpolation"><span class="token delimiter tag">#{</span>hoge<span class="token delimiter tag">}</span></span>&quot;</span> <span class="token comment">#=&gt; 空文字</span>\nputs <span class="token string">&quot;foo =&gt; <span class="token interpolation"><span class="token delimiter tag">#{</span>foo<span class="token delimiter tag">}</span></span>&quot;</span> <span class="token comment">#=&gt; bar</span>\n\nhoge <span class="token operator">||</span><span class="token operator">=</span> <span class="token string">&quot;fuga&quot;</span>\nfoo <span class="token operator">||</span><span class="token operator">=</span> <span class="token string">&quot;fuga&quot;</span>\n\nputs <span class="token string">&quot;hoge =&gt; <span class="token interpolation"><span class="token delimiter tag">#{</span>hoge<span class="token delimiter tag">}</span></span>&quot;</span> <span class="token comment">#=&gt; fuga</span>\nputs <span class="token string">&quot;foo =&gt; <span class="token interpolation"><span class="token delimiter tag">#{</span>foo<span class="token delimiter tag">}</span></span>&quot;</span> <span class="token comment">#=&gt; bar</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="シンボルとは" tabindex="-1"><a class="header-anchor" href="#シンボルとは" aria-hidden="true">#</a> シンボルとは</h2><ul><li>ソース上では文字列、内部で整数として扱われる</li><li>immutable(変更不可)</li><li>速度面でstringより有利なので、ハッシュのキーなどに使われる</li></ul><h2 id="ベンチマークの取り方" tabindex="-1"><a class="header-anchor" href="#ベンチマークの取り方" aria-hidden="true">#</a> ベンチマークの取り方</h2><ul><li>標準ライブラリ <code>benchmark</code>を使う</li></ul><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code><span class="token keyword">require</span> <span class="token string">&#39;benchmark&#39;</span>\n\n<span class="token constant">Benchmark</span> bm <span class="token number">10</span> <span class="token keyword">do</span> <span class="token operator">|</span>r<span class="token operator">|</span>\n  <span class="token comment"># ベンチマーク1</span>\n  r<span class="token punctuation">.</span>report <span class="token string">&quot;bm1&quot;</span> <span class="token keyword">do</span>\n    <span class="token comment"># 計測する処理1</span>\n  <span class="token keyword">end</span>\n\n  <span class="token comment"># ベンチマーク2</span>\n  r<span class="token punctuation">.</span>report <span class="token string">&quot;bm2&quot;</span> <span class="token keyword">do</span>\n    <span class="token comment"># 計測する処理2</span>\n  <span class="token keyword">end</span>\n<span class="token keyword">end</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="csvファイルを読み込む" tabindex="-1"><a class="header-anchor" href="#csvファイルを読み込む" aria-hidden="true">#</a> CSVファイルを読み込む</h2><ul><li>foreachで1行づつ読み込む</li></ul><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code><span class="token keyword">require</span> <span class="token string">&#39;csv&#39;</span>\n\n<span class="token constant">CSV</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span><span class="token string">&quot;sample.csv&quot;</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>row<span class="token operator">|</span>\n  puts row\n<span class="token keyword">end</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>全体を1度に読み込む</li></ul><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>csv <span class="token operator">=</span> <span class="token constant">CSV</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">&quot;sample.csv&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="シングルクォート、ダブルクォートの使い分け" tabindex="-1"><a class="header-anchor" href="#シングルクォート、ダブルクォートの使い分け" aria-hidden="true">#</a> シングルクォート、ダブルクォートの使い分け</h2><ul><li>基本的にはシングルクォートを使用する</li><li>式展開を行う際にはダブルクォートを使用する</li></ul>',33),t={},l=(0,a(3744).Z)(t,[["render",function(s,n){return e}]])},3744:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);