"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[1500],{7160:(e,i,n)=>{n.r(i),n.d(i,{data:()=>a});const a={key:"v-61dffe3c",path:"/backend/java/Spring%20Integration.html",title:"Spring Integration",lang:"ja",frontmatter:{},excerpt:"",headers:[{level:2,title:"Spring Integrationとは",slug:"spring-integrationとは",children:[]},{level:2,title:"Spring Integrationの構成要素",slug:"spring-integrationの構成要素",children:[]},{level:2,title:"Message",slug:"message",children:[]},{level:2,title:"Channel",slug:"channel",children:[]},{level:2,title:"Endppoint",slug:"endppoint",children:[]}],filePathRelative:"backend/java/Spring Integration.md",git:{updatedTime:1639532968e3}}},5549:(e,i,n)=>{n.r(i),n.d(i,{default:()=>t});const a=(0,n(6252).uE)('<h1 id="spring-integration" tabindex="-1"><a class="header-anchor" href="#spring-integration" aria-hidden="true">#</a> Spring Integration</h1><h2 id="spring-integrationとは" tabindex="-1"><a class="header-anchor" href="#spring-integrationとは" aria-hidden="true">#</a> Spring Integrationとは</h2><ul><li>メッセージを中心として、複数のシステムを連携できるように設計されたフレームワーク</li></ul><h2 id="spring-integrationの構成要素" tabindex="-1"><a class="header-anchor" href="#spring-integrationの構成要素" aria-hidden="true">#</a> Spring Integrationの構成要素</h2><ul><li>Message</li><li>Channel</li><li>Endpoint</li></ul><h2 id="message" tabindex="-1"><a class="header-anchor" href="#message" aria-hidden="true">#</a> Message</h2><p>メッセージは下記のようにPayloadとHeaderで構成される</p><ul><li>Message <ul><li>Header: Endpointで付与される情報</li><li>Payload: 任意の形式の情報(xmlや単純な文字列など)</li></ul></li></ul><h2 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> Channel</h2><p>チャネルはEndpointから外部に送信したり、Endpointから受信するのに必要なもの。 二通りのタイプがある。</p><ul><li>Channel <ul><li>Point-to-Point Channel: 1:1で送信</li><li>Publisher-Subscribe Channel: 1:nで送信</li></ul></li></ul><h2 id="endppoint" tabindex="-1"><a class="header-anchor" href="#endppoint" aria-hidden="true">#</a> Endppoint</h2><p>エンドポイントは、Messageそのものを処理する部分であり、いくつかの種類がある。</p><p>アプリケーション連携のためのEndpointには二つのタイプがある。</p><ul><li><p>Adapter: 一方通行</p></li><li><p>Gateway: inputとoutputがあり双方向</p></li><li><p>Service Activator: Messageを引数にしてメソッドを実行する</p></li><li><p>Router: HeaderやPayloadの情報からメッセージをルーティングする</p></li><li><p>Spliter: 一つのメッセージを複数のメッセージに分割して、チャネルに送信する</p></li><li><p>Aggregator: 複数のメッセージを一つのメッセージにまとめて、チャネルに送信する</p></li></ul>',15),l={},t=(0,n(3744).Z)(l,[["render",function(e,i){return a}]])},3744:(e,i)=>{i.Z=(e,i)=>{const n=e.__vccOpts||e;for(const[e,a]of i)n[e]=a;return n}}}]);