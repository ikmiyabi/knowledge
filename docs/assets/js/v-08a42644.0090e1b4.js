"use strict";(self.webpackChunkvuepress_sample2=self.webpackChunkvuepress_sample2||[]).push([[6102],{8256:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-08a42644",path:"/backend/php/PHP%E3%81%AE%E5%9F%BA%E7%A4%8E.html",title:"PHPの基礎",lang:"ja",frontmatter:{},excerpt:"",headers:[{level:2,title:"PHPとは",slug:"phpとは",children:[]},{level:2,title:"Hello World",slug:"hello-world",children:[]},{level:2,title:"GETメソッド、POSTメソッド",slug:"getメソッド、postメソッド",children:[]},{level:2,title:"isset関数",slug:"isset関数",children:[]},{level:2,title:"dateメソッド",slug:"dateメソッド",children:[]},{level:2,title:"変数の定義",slug:"変数の定義",children:[]},{level:2,title:"繰り返し文",slug:"繰り返し文",children:[]},{level:2,title:"配列",slug:"配列",children:[]},{level:2,title:"ハッシュ(Hash)",slug:"ハッシュ-hash",children:[]},{level:2,title:"文字列操作",slug:"文字列操作",children:[{level:3,title:"シングルクォート「''」とダブルクォート「\"\"」について",slug:"シングルクォート「-」とダブルクォート「-」について",children:[]}]},{level:2,title:"?>の省略",slug:"の省略",children:[]},{level:2,title:"print",slug:"print",children:[]},{level:2,title:"ヒアドキュメント構文",slug:"ヒアドキュメント構文",children:[]},{level:2,title:"require",slug:"require",children:[]},{level:2,title:"リクエストパラメータの取得",slug:"リクエストパラメータの取得",children:[]},{level:2,title:"変数・定数",slug:"変数・定数",children:[]},{level:2,title:"制御構文",slug:"制御構文",children:[{level:3,title:"if文",slug:"if文",children:[]},{level:3,title:"switch文",slug:"switch文",children:[]},{level:3,title:"for文",slug:"for文",children:[]},{level:3,title:"foreach文",slug:"foreach文",children:[]}]},{level:2,title:"PHPの配列",slug:"phpの配列",children:[{level:3,title:"配列",slug:"配列-1",children:[]}]},{level:2,title:"関数",slug:"関数",children:[]},{level:2,title:"PHPのデータベース操作",slug:"phpのデータベース操作",children:[]},{level:2,title:"サンプル",slug:"サンプル",children:[]}],filePathRelative:"backend/php/PHPの基礎.md",git:{updatedTime:1639532968e3,contributors:[{name:"bamv-ikeda",email:"ikeda@bamv.co.jp",commits:1}]}}},6014:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="phpの基礎" tabindex="-1"><a class="header-anchor" href="#phpの基礎" aria-hidden="true">#</a> PHPの基礎</h1><h2 id="phpとは" tabindex="-1"><a class="header-anchor" href="#phpとは" aria-hidden="true">#</a> PHPとは</h2><ul><li>Webに特化したサーバーサイドのスクリプト言語 ※スクリプト言語とは、プログラムの記述や実行を比較的容易に出来る言語</li><li>用途はWebメイン、HTMLと合わせて使う</li><li>インタープリタ形式</li><li>データベースとの連携が楽だが、速度が遅い・セキュリティが脆いという欠点がある</li></ul><h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h2><ul><li>phpタブ <code>&lt;?php ~ ?&gt;</code> で囲んで記述する</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;Hello World!&#39;</span><span class="token punctuation">;</span>\n<span class="token delimiter important">?&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="getメソッド、postメソッド" tabindex="-1"><a class="header-anchor" href="#getメソッド、postメソッド" aria-hidden="true">#</a> GETメソッド、POSTメソッド</h2><p>test.html</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>GET<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test.php<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      お名前：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>送信<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;こんにちは&quot;</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;username&quot;</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">&quot;さん&quot;</span><span class="token punctuation">;</span>\n<span class="token delimiter important">?&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注）「&lt;」や「&lt;」、「&amp;」でバグが発生するのを回避するためには、htmlspecialchars関数を用いること</p><p>※POSTメソッドに変更するにはGETの部分をPOSTに変更すればよい</p><h2 id="isset関数" tabindex="-1"><a class="header-anchor" href="#isset関数" aria-hidden="true">#</a> isset関数</h2><ul><li>値が設定されているならtrueを返すメソッド</li></ul><h2 id="dateメソッド" tabindex="-1"><a class="header-anchor" href="#dateメソッド" aria-hidden="true">#</a> dateメソッド</h2><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Y-m-d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 2016-09-12等</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="変数の定義" tabindex="-1"><a class="header-anchor" href="#変数の定義" aria-hidden="true">#</a> 変数の定義</h2><table><thead><tr><th style="text-align:center;">変数名</th><th style="text-align:center;">役割</th></tr></thead><tbody><tr><td style="text-align:center;">$_REQUEST</td><td style="text-align:center;">HTTPのリクエストパラメータ</td></tr><tr><td style="text-align:center;">$_GET</td><td style="text-align:center;">HTTPのGETパラメータ</td></tr><tr><td style="text-align:center;">$_POST</td><td style="text-align:center;">HTTPのPOSTパラメータ</td></tr><tr><td style="text-align:center;">$_FILES</td><td style="text-align:center;">アップロードされたファイルの情報</td></tr><tr><td style="text-align:center;">$_SESSION</td><td style="text-align:center;">セッション</td></tr><tr><td style="text-align:center;">$_COOKIE</td><td style="text-align:center;">クッキー</td></tr></tbody></table><h2 id="繰り返し文" tabindex="-1"><a class="header-anchor" href="#繰り返し文" aria-hidden="true">#</a> 繰り返し文</h2><ul><li>break;で繰り返し処理を中断する</li><li>continue;でその会の処理を飛ばす</li></ul><h2 id="配列" tabindex="-1"><a class="header-anchor" href="#配列" aria-hidden="true">#</a> 配列</h2><ul><li>Javaの場合</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> fruits<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;りんご&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;みかん&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;バナナ&quot;</span><span class="token punctuation">}</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fruits<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>PHPの場合</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$fruits</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;りんご&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;みかん&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;バナナ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$fruits</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">echo</span> <span class="token variable">$fruits</span><span class="token punctuation">[</span><span class="token variable">$1</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="ハッシュ-hash" tabindex="-1"><a class="header-anchor" href="#ハッシュ-hash" aria-hidden="true">#</a> ハッシュ(Hash)</h2><ul><li><p>連想配列やディクショナリ(Dictionary)とも呼ばれる</p></li><li><p>Javaの場合</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fruits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfruits<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;りんご&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfruits<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;みかん&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfruits<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;バナナ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 結果はリンゴ</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>PHPの場合</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$fruits</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>\n    <span class="token string double-quoted-string">&quot;apple&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;りんご&quot;</span><span class="token punctuation">;</span>\n    <span class="token string double-quoted-string">&quot;orange&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;みかん&quot;</span><span class="token punctuation">;</span>\n    <span class="token string double-quoted-string">&quot;banana&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;バナナ&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token variable">$fruits</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;apple&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 結果はりんご</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="文字列操作" tabindex="-1"><a class="header-anchor" href="#文字列操作" aria-hidden="true">#</a> 文字列操作</h2><ul><li>echo（文字列を標準出力する）</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;welcome&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="シングルクォート「-」とダブルクォート「-」について" tabindex="-1"><a class="header-anchor" href="#シングルクォート「-」とダブルクォート「-」について" aria-hidden="true">#</a> シングルクォート「&#39;&#39;」とダブルクォート「&quot;&quot;」について</h3><p>シングルクオート「&#39;&#39;」については単純に文字列を出力する ダブルクォート「&quot;&quot;」についてはエスケープする</p><p>基本的にはシングルクォートを使用し、エスケープの必要がある際にはダブルクォートを用いるのが一般的</p><h2 id="の省略" tabindex="-1"><a class="header-anchor" href="#の省略" aria-hidden="true">#</a> ?&gt;の省略</h2><ul><li>全てphpで書かれているphpのファイルについては?&gt;は省略可能</li><li>むしろ余分な空白が入ってしまうことから省略すること推奨されている</li><li>phpを埋め込んでいるものについては省略不可</li></ul><h2 id="print" tabindex="-1"><a class="header-anchor" href="#print" aria-hidden="true">#</a> print</h2><ul><li>echoと同様文字列を標準出力する</li><li>一般的にはechoを用いる(echoの方が速度が速いため)</li></ul><h2 id="ヒアドキュメント構文" tabindex="-1"><a class="header-anchor" href="#ヒアドキュメント構文" aria-hidden="true">#</a> ヒアドキュメント構文</h2><ul><li>「&lt;&lt;&lt;」の後ろに指定した記号までの文字列を標準出力する</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span> <span class="token constant">END</span>\nWelcome\nto\n<span class="token constant">PHP</span>\n<span class="token constant">END</span><span class="token punctuation">;</span>\n<span class="token comment">// 前にスペース等を入れてはいけない</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="require" tabindex="-1"><a class="header-anchor" href="#require" aria-hidden="true">#</a> require</h2><ul><li>使い回す部分を別ファイルにまとめる(require文)</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">require</span> <span class="token string single-quoted-string">&#39;ファイル名&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="リクエストパラメータの取得" tabindex="-1"><a class="header-anchor" href="#リクエストパラメータの取得" aria-hidden="true">#</a> リクエストパラメータの取得</h2><ul><li>$_REQUEST[&#39;リクエストパラメータ名&#39;]で指定したリクエストパラメータを取得する</li><li>isset関数を用いればパラメータがしていされているのかどうか調べられる</li><li>htmlspecialchars関数を使用することで&lt;&gt;などのhtmlの特殊文字を無効化し、文字列として取得することが出来る</li></ul><h2 id="変数・定数" tabindex="-1"><a class="header-anchor" href="#変数・定数" aria-hidden="true">#</a> 変数・定数</h2><ul><li>$nameのように$変数名のように宣言</li><li>counst NAMEのように宣言する($は不要)</li></ul><h2 id="制御構文" tabindex="-1"><a class="header-anchor" href="#制御構文" aria-hidden="true">#</a> 制御構文</h2><h3 id="if文" tabindex="-1"><a class="header-anchor" href="#if文" aria-hidden="true">#</a> if文</h3><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;mail&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;メールを送信する&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;メールを送信しない&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="switch文" tabindex="-1"><a class="header-anchor" href="#switch文" aria-hidden="true">#</a> switch文</h3><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;time&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string single-quoted-string">&#39;morning&#39;</span><span class="token punctuation">:</span>\n      <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;おはよう！&#39;</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string single-quoted-string">&#39;afternoon&#39;</span><span class="token punctuation">:</span>\n      <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;こんにちは！&#39;</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string single-quoted-string">&#39;night&#39;</span><span class="token punctuation">:</span>\n      <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;こんばんは！&#39;</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="for文" tabindex="-1"><a class="header-anchor" href="#for文" aria-hidden="true">#</a> for文</h3><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;結果：&#39;</span><span class="token operator">.</span><span class="token variable">$i</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="foreach文" tabindex="-1"><a class="header-anchor" href="#foreach文" aria-hidden="true">#</a> foreach文</h3><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// 配列をforeach文で標準出力</span>\n<span class="token variable">$colors</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;black&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;white&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$colors</span> <span class="token keyword">as</span> <span class="token variable">$color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">echo</span> <span class="token variable">$color</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ハッシュをforeach文で標準出力</span>\n<span class="token variable">$fruits</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>\n    <span class="token string double-quoted-string">&quot;apple&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;りんご&quot;</span><span class="token punctuation">;</span>\n    <span class="token string double-quoted-string">&quot;orange&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;みかん&quot;</span><span class="token punctuation">;</span>\n    <span class="token string double-quoted-string">&quot;banana&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;バナナ&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$fruits</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">echo</span> <span class="token variable">$key</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39;: &#39;</span><span class="token operator">.</span><span class="token variable">$value</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="phpの配列" tabindex="-1"><a class="header-anchor" href="#phpの配列" aria-hidden="true">#</a> PHPの配列</h2><h3 id="配列-1" tabindex="-1"><a class="header-anchor" href="#配列-1" aria-hidden="true">#</a> 配列</h3><ul><li>配列の宣言は二つ方法がある</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token variable">$list</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="関数" tabindex="-1"><a class="header-anchor" href="#関数" aria-hidden="true">#</a> 関数</h2><ul><li>日時の取得</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// タイムゾーンを指定する</span>\n<span class="token function">date_default_timezone_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Japan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// フォーマットを指定して日時を表示する(2019/01/23 12:34:56)</span>\n<span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y/m/d H:i:s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>乱数の利用</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// 乱数を取得する</span>\n<span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 最小値、最大値を指定して乱数を取得する</span>\n<span class="token function">rand</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 乱数の最大値を取得する</span>\n<span class="token function">getrandmax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>全角・半角の変換</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// 半角カナを全角かなへ変換する</span>\n<span class="token function">mb_comvert_kana</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;カナ&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 全角数字を半角数字に変換する</span>\n<span class="token function">mb_convert_kana</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;３６５&#39;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>※マルチバイト文字列関数の一種。複数バイトの文字列を操作する関数のこと。戦闘にmbがつく</p><ul><li>正規表現</li></ul><table><thead><tr><th style="text-align:center;">メソッド名</th><th style="text-align:center;">内容</th></tr></thead><tbody><tr><td style="text-align:center;"><code>preg_match(&#39;パターン&#39;, &#39;入力文字列&#39;)</code></td><td style="text-align:center;">入力文字列が指定したパターンにがっちすればtrue(1)を返すメソッド</td></tr></tbody></table><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$postcode</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;postcode&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token variable">$regexp</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;/^[0-9]{7}$/&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$regexp</span><span class="token punctuation">,</span> <span class="token variable">$postcode</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">echo</span> <span class="token variable">$postcode</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39;は郵便番号です&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token keyword">echo</span> <span class="token variable">$postcode</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39;は郵便番号ではありません&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>ファイル操作</li></ul><table><thead><tr><th style="text-align:center;">メソッド名</th><th style="text-align:center;">内容</th></tr></thead><tbody><tr><td style="text-align:center;"><code>file_exist(&#39;ファイル名&#39;)</code></td><td style="text-align:center;">指定したファイルが存在すればtrue、しなければfalseを返す</td></tr><tr><td style="text-align:center;"><code>file_get_contents(&#39;ファイル名&#39;)</code></td><td style="text-align:center;">ファイルを読み込む関数</td></tr><tr><td style="text-align:center;"><code>file_put_contents(&#39;ファイル名&#39;, &#39;文字列&#39;)</code></td><td style="text-align:center;">ファイルに文字列を書き込む関数</td></tr><tr><td style="text-align:center;"><code>json_decode(&#39;文字列&#39;)</code></td><td style="text-align:center;">json形式の文字列をPHPの文字列や配列のデータに変換する</td></tr><tr><td style="text-align:center;"><code>json_encode(&#39;値&#39;)</code></td><td style="text-align:center;">文字列やデータをjson形式に変換する</td></tr></tbody></table><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$file_path</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;board.txt&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token variable">$board</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token variable">$board</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;message&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">,</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$board</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$board</span> <span class="token keyword">as</span> <span class="token variable">$message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">echo</span> <span class="token variable">$message</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>ファイルのアップロード</li></ul><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>~<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>※アップロードされたファイルは一時的なファイルに保存され、そのファイル名は <code>$_FILE[&#39;file&#39;][&#39;tmp_name&#39;]</code> で取得できる</p><table><thead><tr><th style="text-align:center;">メソッド名</th><th style="text-align:center;">内容</th></tr></thead><tbody><tr><td style="text-align:center;"><code>is_uploaded_file(&#39;ファイル名&#39;)</code></td><td style="text-align:center;">指定したファイルアップロードされたファイルか確認する</td></tr><tr><td style="text-align:center;"><code>mkdir(&#39;フォルダ名&#39;)</code></td><td style="text-align:center;">指定したフォルダを作成する</td></tr><tr><td style="text-align:center;"><code>basename(&#39;パス&#39;)</code></td><td style="text-align:center;">パスの末尾にあるフォルダ名や、ファイル名のみを取り出す</td></tr><tr><td style="text-align:center;"><code>move_uploaded_file(&#39;一時的なファイル, 保存先のファイル&#39;)</code></td><td style="text-align:center;">アップロードされた一時的なファイルを保存先へ移動する。成功時にはtrueを返す</td></tr></tbody></table><h2 id="phpのデータベース操作" tabindex="-1"><a class="header-anchor" href="#phpのデータベース操作" aria-hidden="true">#</a> PHPのデータベース操作</h2><ul><li>PDOクラス</li></ul><p>DSN(Data Source Name)とはデータベースを識別するための情報</p><p>// DSN(Data Source Name)とはデータベースを識別するための情報</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span>\n    <span class="token string single-quoted-string">&#39;mysql:host=localhost;dbname=shop;charset=utf8&#39;</span><span class="token punctuation">,</span>\n    <span class="token string single-quoted-string">&#39;username&#39;</span><span class="token punctuation">,</span>\n    <span class="token string single-quoted-string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// DSN(Data Source Name)とはデータベースを識別するための情報</span>\n\n<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$pdo</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;select * from product&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;p&gt;:<span class="token interpolation"><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">]</span></span>:<span class="token interpolation"><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span></span>:<span class="token interpolation"><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;price&#39;</span><span class="token punctuation">]</span></span>&lt;/p&gt;&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>sql文の実行</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// sql文の準備</span>\n<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;select * from product where name = ?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// sql文の実行</span>\n<span class="token variable">$sql</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;keyword&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="サンプル" tabindex="-1"><a class="header-anchor" href="#サンプル" aria-hidden="true">#</a> サンプル</h2><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">/* PHPの基本文法 */</span>\n\n<span class="token comment">// 文字列の出力</span>\n<span class="token keyword">print</span> <span class="token string single-quoted-string">&#39;こんにちは&#39;</span><span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;こんばんは&#39;</span><span class="token punctuation">,</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 変数の宣言</span>\n<span class="token variable">$number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token variable">$number</span> <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 定数の宣言</span>\n<span class="token keyword">const</span> <span class="token constant">NAME</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;miyabi&quot;</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token constant">NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 配列</span>\n<span class="token variable">$list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 連想配列(ハッシュ)</span>\n<span class="token variable">$fruits</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>\n    <span class="token string double-quoted-string">&quot;apple&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;りんご&quot;</span><span class="token punctuation">,</span>\n    <span class="token string double-quoted-string">&quot;orange&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;みかん&quot;</span><span class="token punctuation">,</span>\n    <span class="token string double-quoted-string">&quot;banana&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;バナナ&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$fruits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token variable">$fruits</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;apple&quot;</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bool型</span>\n<span class="token variable">$is_true</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$is_true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$is_false</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$is_false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 乱数の利用</span>\n<span class="token variable">$random_number</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// if文</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$random_number</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token variable">$random_number</span></span>&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;は5より大きいです&quot;</span><span class="token punctuation">,</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token variable">$random_number</span></span>&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;は5以下です&quot;</span><span class="token punctuation">,</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div>',90),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);