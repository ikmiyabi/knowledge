"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[3273],{8025:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-82de15e6",path:"/backend/java/%E3%80%90Java8%E3%80%91%E3%83%AA%E3%82%B9%E3%83%88%E3%82%92%E8%A4%87%E6%95%B0%E6%9D%A1%E4%BB%B6%E3%81%A7%E3%82%BD%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B.html",title:"リストを複数条件でソートする（java8）",lang:"ja",frontmatter:{},excerpt:"",headers:[{level:2,title:"Java.util.streamの活用",slug:"java-util-streamの活用",children:[]},{level:2,title:"ラムダ式",slug:"ラムダ式",children:[]}],filePathRelative:"backend/java/【Java8】リストを複数条件でソートする.md",git:{updatedTime:1639532968e3}}},9495:(n,a,s)=>{s.r(a),s.d(a,{default:()=>k});var t=s(6252);const e=(0,t.uE)('<h1 id="リストを複数条件でソートする-java8" tabindex="-1"><a class="header-anchor" href="#リストを複数条件でソートする-java8" aria-hidden="true">#</a> リストを複数条件でソートする（java8）</h1><h2 id="java-util-streamの活用" tabindex="-1"><a class="header-anchor" href="#java-util-streamの活用" aria-hidden="true">#</a> Java.util.streamの活用</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserLog</span><span class="token punctuation">&gt;</span></span> resultUlList <span class="token operator">=</span> ulList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">UserLog</span><span class="token operator">::</span><span class="token function">getCreatedDate_YYYYMMDDHHMMSS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token class-name">UserLog</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol><li>streamメソッドでstream化する</li><li>Comparator（コンパレータ）にソート条件を指定する</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">UserLog</span><span class="token operator">::</span><span class="token function">getCreatedDate_YYYYMMDDHHMMSS</span><span class="token punctuation">)</span>  <span class="token comment">// 一つ目のソート条件を指定</span>\n    <span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token class-name">UserLog</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span>  <span class="token comment">// 二つ目のソート条件を指定</span>\n    <span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 逆順に変更</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li><code>.collect(Collectors.toList())</code>でリストに収納する</li></ol><h2 id="ラムダ式" tabindex="-1"><a class="header-anchor" href="#ラムダ式" aria-hidden="true">#</a> ラムダ式</h2>',7),p={href:"http://www.casleyconsulting.co.jp/blog-engineer/java/%E4%BB%8A%E6%9B%B4%E8%81%9E%E3%81%91%E3%81%AA%E3%81%84%EF%BC%9Fjava8%E3%81%AE%E3%83%A9%E3%83%A0%E3%83%80%E5%BC%8F/",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("今更聞けない？java8のラムダ式"),c={href:"http://qiita.com/lrf141/items/98ffbeaee42d30cca4dc",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("関数型プログラミングって何、ラムダってなんだよ"),u=(0,t._)("li",null,[(0,t.Uk)("「関数型インターフェースを簡単に書けるもの」と思っておけばいい "),(0,t._)("ul",null,[(0,t._)("li",null,"関数型インターフェースは抽象メソッドを一つ持つインターフェースのこと(らしい)")])],-1),i=(0,t.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserLog</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">UserLog</span> ul1<span class="token punctuation">,</span><span class="token class-name">UserLog</span> ul2<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> ul2<span class="token punctuation">.</span><span class="token function">getCreatedDate_YYYYMMDDHHMMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> ul1<span class="token punctuation">.</span><span class="token function">getCreatedDate_YYYYMMDDHHMMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>↑これが</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">UserLog</span><span class="token operator">::</span><span class="token function">getCreatedDate_YYYYMMDDHHMMSS</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>↑こうなる</p>',4),r={},k=(0,s(3744).Z)(r,[["render",function(n,a){const s=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",p,[o,(0,t.Wm)(s)])]),(0,t._)("li",null,[(0,t._)("a",c,[l,(0,t.Wm)(s)])]),u]),i],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}}}]);